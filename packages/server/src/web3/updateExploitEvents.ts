import Web3 from "web3";
import { AbiItem } from "web3-utils";
import { Prisma, PrismaClient, PrismaPromise } from "@prisma/client";
import { Promise } from "bluebird";

import NomadBase from "./contracts/NomadBase.json";
import ERC20 from "./contracts/ERC20.json";

const NomadABI = NomadBase as AbiItem[];
const ERC20Abi = ERC20 as AbiItem[];

const web3 = new Web3();
web3.setProvider(
	new Web3.providers.WebsocketProvider(
		"wss://mainnet.infura.io/ws/v3/90f90de2a93345ce892ab2abf42fa995"
	)
);
const nomad = new web3.eth.Contract(
	NomadABI,
	"0x5d94309e5a0090b165fa4181519701637b6daeba"
);

console.log("Initializing PrismaClient.");
const prisma = new PrismaClient();

export default async function updateExploitEvents() {
	console.log("Processing");
	const processedEvents = await nomad.getPastEvents("Process", {
		fromBlock: 15259101,
		toBlock: 15259769,
	});

	const responses = await Promise.map(
		processedEvents,
		(tx) => {
			return web3.eth.getTransaction(tx.transactionHash);
		},
		{ concurrency: 10 }
	);

	const exploitTransactions = responses.filter(
		(tx) =>
			tx.input.startsWith("0x928bc4b2") &&
			!tx.input.startsWith("0x6188af0e0000000000")
	);

	const transactionReceipts = await Promise.map(
		exploitTransactions,
		(tx) => web3.eth.getTransactionReceipt(tx.hash),
		{ concurrency: 10 }
	);

	transactionReceipts.forEach(async (receipt) => {
		const transferLog = receipt.logs.filter((log) =>
			log.topics.includes(
				"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef" // transfer event
			)
		)[0];
		const timestamp = new Date(
			Number((await web3.eth.getBlock(receipt.blockNumber)).timestamp) * 1000
		).toISOString();

		const tokenContract = new web3.eth.Contract(ERC20Abi, transferLog.address);
		const tokenDecimals =
			10 ** Number(await tokenContract.methods.decimals().call());

		const amount =
			Number(web3.eth.abi.decodeParameter("uint256", transferLog.data)) /
			tokenDecimals;

		console.log("Upserting.");

		await prisma.account.upsert({
			where: {
				address: receipt.from,
			},
			update: {
				exploits: {
					create: {
						timestamp,
						amount,
						contractAddress: transferLog.address,
						transactionHash: receipt.transactionHash,
					},
				},
			},
			create: {
				address: receipt.from,
				exploits: {
					create: {
						timestamp,
						amount,
						contractAddress: transferLog.address,
						transactionHash: receipt.transactionHash,
					},
				},
			},
		});
		console.log("upserted");
		return;
	});
	return;
}
