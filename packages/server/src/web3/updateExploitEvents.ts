import Web3 from "web3";
import { AbiItem } from "web3-utils";
import { PrismaClient } from "@prisma/client";
import { Promise } from "bluebird";

import NomadBase from "./contracts/NomadBase.json";
import ERC20 from "./contracts/ERC20.json";

const NomadABI = NomadBase as AbiItem[];
const ERC20Abi = ERC20 as AbiItem[];

const web3 = new Web3(
	"https://mainnet.infura.io/v3/90f90de2a93345ce892ab2abf42fa995"
);
const nomad = new web3.eth.Contract(
	NomadABI,
	"0x5d94309e5a0090b165fa4181519701637b6daeba"
);

const prisma = new PrismaClient();

export default async function updateExploitEvents() {
	const processedEvents = await nomad.getPastEvents("Process", {
		fromBlock: 15259101,
		toBlock: 15259769,
	});

	const responses = await Promise.map(
		processedEvents,
		(tx) => {
			return web3.eth.getTransaction(tx.transactionHash);
		},
		{ concurrency: 10 }
	);

	const exploitTransactions = responses.filter((tx) =>
		tx.input.startsWith("0x928bc4b2")
	);
	const transactionReceipts = await Promise.all(
		exploitTransactions.map((tx) => web3.eth.getTransactionReceipt(tx.hash))
	);

	transactionReceipts.slice(0, 30).forEach(async (receipt) => {
		console.log("Checking transaction receipt.");
		const transferLog = receipt.logs.filter((log) =>
			log.topics.includes(
				"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef" // transfer event
			)
		)[0];

		const tokenContract = new web3.eth.Contract(ERC20Abi, transferLog.address);
		const tokenDecimals =
			10 ** Number(await tokenContract.methods.decimals().call());

		const tokenAmount =
			Number(web3.eth.abi.decodeParameter("uint256", transferLog.data)) /
			tokenDecimals;

		const existingExploiterAccount = await prisma.account.findUnique({
			where: { address: receipt.from },
			include: { assets: true },
		});

		if (!existingExploiterAccount) {
			return await prisma.account.create({
				data: {
					address: receipt.from,
					assets: {
						create: {
							contractAddress: transferLog.address,
							amountStolen: tokenAmount,
						},
					},
				},
			});
		}

		const existingAsset = existingExploiterAccount.assets.filter(
			(asset) => asset.contractAddress == transferLog.address
		);

		if (existingAsset.length == 0) {
			return await prisma.asset.create({
				data: {
					accountAddress: receipt.from,
					contractAddress: transferLog.address,
				},
			});
		}

		await prisma.asset.update({
			where: { id: existingAsset[0].id },
			data: { amountStolen: { increment: tokenAmount } },
		});
	});
}

updateExploitEvents();
